// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`should render button with material-ui Zoom and Fab components 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <DrawerButton
    className="some-css-class"
    clickHandler={[MockFunction]}
    size="small"
    visible={true}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": <WithTheme(Zoom)
        in={true}
        unmountOnExit={true}
      >
        <WithStyles(Fab)
          aria-label="notes list drawer"
          color="primary"
          onClick={[MockFunction]}
          size="small"
        >
          <pure(MenuIcon) />
        </WithStyles(Fab)>
      </WithTheme(Zoom)>,
      "className": "some-css-class",
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": <WithStyles(Fab)
          aria-label="notes list drawer"
          color="primary"
          onClick={[MockFunction]}
          size="small"
        >
          <pure(MenuIcon) />
        </WithStyles(Fab)>,
        "in": true,
        "unmountOnExit": true,
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "aria-label": "notes list drawer",
          "children": <pure(MenuIcon) />,
          "color": "primary",
          "onClick": [MockFunction],
          "size": "small",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {},
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        "type": [Function],
      },
      "type": [Function],
    },
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": <WithTheme(Zoom)
          in={true}
          unmountOnExit={true}
        >
          <WithStyles(Fab)
            aria-label="notes list drawer"
            color="primary"
            onClick={[MockFunction]}
            size="small"
          >
            <pure(MenuIcon) />
          </WithStyles(Fab)>
        </WithTheme(Zoom)>,
        "className": "some-css-class",
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": <WithStyles(Fab)
            aria-label="notes list drawer"
            color="primary"
            onClick={[MockFunction]}
            size="small"
          >
            <pure(MenuIcon) />
          </WithStyles(Fab)>,
          "in": true,
          "unmountOnExit": true,
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "aria-label": "notes list drawer",
            "children": <pure(MenuIcon) />,
            "color": "primary",
            "onClick": [MockFunction],
            "size": "small",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {},
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          "type": [Function],
        },
        "type": [Function],
      },
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    "context": Object {},
  },
}
`;
